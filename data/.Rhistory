res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
beta.list  = mcmc.list(mcmc(res1$beta),mcmc(res2$beta),mcmc(res3$beta))
theta.list  = mcmc.list(mcmc(res1$theta),mcmc(res2$theta),mcmc(res3$theta))
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
set.seed(1)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,50),n.reps=10e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,50),n.reps=10e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,50),n.reps=10e3)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
beta.list  = mcmc.list(mcmc(res1$beta),mcmc(res2$beta),mcmc(res3$beta))
theta.list  = mcmc.list(mcmc(res1$theta),mcmc(res2$theta),mcmc(res3$theta))
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
set.seed(1)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,50),n.reps=20e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,50),n.reps=20e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,50),n.reps=20e3)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
beta.list  = mcmc.list(mcmc(res1$beta),mcmc(res2$beta),mcmc(res3$beta))
theta.list  = mcmc.list(mcmc(res1$theta),mcmc(res2$theta),mcmc(res3$theta))
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
gelman.diag(theta.list) # theta convergence
alp <- data.frame(alpha=c(res1$alpha,res2$alpha,res3$alpha))
bet <- data.frame(beta=c(res1$beta,res2$beta,res3$beta))
the <- data.frame(rbind(res1$theta,res2$theta,res3$theta))
colnames(the) <- paste('theta',1:10,sep='')
simu <- data.frame(the,alp,bet,chain=rep(1:3, each=20000), iter=rep(1:20000,3))
simu <- subset(simu, iter>10000)
simu$iter <- rep(1:10000,3)
simu.melt <- melt(simu, id.vars=c('iter','chain'))
cond1 <- simu.melt$variable %in% colnames(the)
qplot(data=simu.melt[cond1,],x=value,y=..density..,,geom='histogram') + facet_wrap(facets=~ variable)
aux<-with(simu.melt,tapply(value,variable,quantile,probs=c(.025, .975)))
ci <- matrix(0,ncol=2,nrow=12)
for (i in 1:12) ci[i,] <- aux[[i]]
rownames(ci) <- names(aux)
colnames(ci) <- c('Lower limit', ' Upper limit')
ci
qplot(data=simu,x=alp,y=bet, geom='point',size=I(1))+geom_density2d()
simu <- data.frame(simu)
qplot(data=simu,x=alp,y=bet, geom='point',size=I(1))+geom_density2d()
qplot(data=simu,x=alpha,y=beta, geom='point',size=I(1))+geom_density2d()
View(simu)
35^(-5/2)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
beta.list  = mcmc.list(mcmc(res1$beta),mcmc(res2$beta),mcmc(res3$beta))
theta.list  = mcmc.list(mcmc(res1$theta),mcmc(res2$theta),mcmc(res3$theta))
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
set.seed(1)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
set.seed(1)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
gelman.diag(alpha.list) # alpha convergence
dn   <- c(58,90,48,57,103,57,86,112,273,64)
y  <- c(16,9,10,13,19,20,18,17,35,55)
n <- dn + y
sample_theta = function(y,n,alpha,beta) {
rbeta(length(y), alpha+y, beta+n-y)
}
sample_alpha = function(theta, beta, alpha, sigma) {
n = length(theta)
alpha_star = rnorm(1, alpha, sigma)
if (alpha_star < 0) return(alpha)
lrho = (alpha_star-alpha)*sum(log(theta))-
(5/2)*(log(alpha_star+beta)-log(alpha+beta)) -
n*(lgamma(alpha_star)-lgamma(alpha)) +
n*(lgamma(alpha_star+beta)-lgamma(alpha+beta))
return(ifelse(log(runif(1))<lrho, alpha_star, alpha))
}
sample_beta = function(theta, beta, alpha, sigma) {
n = length(theta)
beta_star = rnorm(1, beta, sigma)
if (beta_star < 0) return(beta)
lrho = (beta_star-beta)*sum(log(1-theta))-
(5/2)*(log(beta_star+alpha)-log(alpha+beta)) -
n*(lgamma(beta_star)-lgamma(beta)) +
n*(lgamma(beta_star+alpha)-lgamma(alpha+beta))
return(ifelse(log(runif(1))<lrho, beta_star, beta))
}
run_mcmc = function(alpha0, beta0, n.reps=1e3, tune=TRUE) {
sigma = 1
theta_keep = matrix(NA, n.reps, length(y))
alpha_keep = numeric(n.reps); alpha_keep[1] = alpha = alpha0
beta_keep = numeric(n.reps); beta_keep[1] = beta = beta0
for (i in 1:n.reps) {
theta = sample_theta(y,n,alpha,beta)
# Automatically tune sigma
alpha_old = alpha
alpha = sample_alpha(theta, beta, alpha, sigma)
beta_old = beta
beta = sample_beta(theta, beta, alpha, sigma)
if (tune) {
if (alpha==alpha_old | beta_old==beta) {
sigma = sigma/1.1
} else {
sigma = sigma*1.1
}
}
theta_keep[i,] = theta
alpha_keep[i]  = alpha
beta_keep[i]   = beta
}
return(list(theta=theta_keep, alpha=alpha_keep, beta=beta_keep))
}
set.seed(1)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
library(coda)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
beta.list  = mcmc.list(mcmc(res1$beta),mcmc(res2$beta),mcmc(res3$beta))
theta.list  = mcmc.list(mcmc(res1$theta),mcmc(res2$theta),mcmc(res3$theta))
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
set.seed(1)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
beta.list  = mcmc.list(mcmc(res1$beta),mcmc(res2$beta),mcmc(res3$beta))
theta.list  = mcmc.list(mcmc(res1$theta),mcmc(res2$theta),mcmc(res3$theta))
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
gelman.diag(theta.list) # theta convergence
gelman.diag(alpha.list) # alpha convergence
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
set.seed(1)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
beta.list  = mcmc.list(mcmc(res1$beta),mcmc(res2$beta),mcmc(res3$beta))
theta.list  = mcmc.list(mcmc(res1$theta),mcmc(res2$theta),mcmc(res3$theta))
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
gelman.diag(theta.list) # theta convergence
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
res1f = run_mcmc(alpha0=res1$alpha[10e3], beta0=res1$beta[10e3],n.reps=10e3)
res2f = run_mcmc(alpha0=res2$alpha[10e3], beta0=res2$beta[10e3],n.reps=10e3)
res3f = run_mcmc(alpha0=res3$alpha[10e3], beta0=res3$beta[10e3],n.reps=10e3)
alp <- data.frame(alpha=c(res1$alpha,res2$alpha,res3$alpha))
bet <- data.frame(beta=c(res1$beta,res2$beta,res3$beta))
the <- data.frame(rbind(res1$theta,res2$theta,res3$theta))
colnames(the) <- paste('theta',1:10,sep='')
simu <- data.frame(the,alp,bet,chain=rep(1:3, each=10000), iter=rep(1:10000,3))
View(simu)
alp <- data.frame(alpha=c(res1f$alpha,res2f$alpha,res3f$alpha))
bet <- data.frame(beta=c(res1f$beta,res2f$beta,res3f$beta))
the <- data.frame(rbind(res1f$theta,res2f$theta,res3f$theta))
colnames(the) <- paste('theta',1:10,sep='')
simu <- data.frame(the,alp,bet,chain=rep(1:3, each=10000), iter=rep(1:10000,3))
View(simu)
simu.melt <- melt(simu, id.vars=c('iter','chain'))
aux<-with(simu.melt,tapply(value,variable,quantile,probs=c(.025, .975)))
ci <- matrix(0,ncol=2,nrow=12)
for (i in 1:12) ci[i,] <- aux[[i]]
rownames(ci) <- names(aux)
colnames(ci) <- c('Lower limit', ' Upper limit')
ci
ab.post <- data.frame(alp=c(alpha=c(res1fin$alpha,res2fin$alpha,res3fin$alpha)),bet = c(beta=c(res1fin$beta,res2fin$beta,res3fin$beta)) )
simu <- data.frame(simu)
qplot(data=simu,x=alpha,y=beta, geom='point',size=I(1))+geom_density2d()
deny<-c(58,90,48,57,103,57,86,112,273,64)
y<-c(16,9,10,13,19,20,18,17,35,55)
n<-y+deny
sample_theta = function(y,n,alpha,beta) {
rbeta(length(y),y+alpha, n-y+beta)
}
sample_alpha = function(theta, beta, alpha, sigma) {
alpha_star = rnorm(1, alpha, sigma)
n<-length(theta)
if (alpha_star < 0 ) return(alpha)
lrho = (alpha_star-alpha)*sum(log(theta))
-5/2*(log(alpha_star+beta)-log(alpha+beta))
+ n*(lgamma(alpha_star+beta)-lgamma(alpha+beta))
-n*(lgamma(alpha_star)-lgamma(alpha))
return(ifelse(log(runif(1))<lrho, alpha_star, alpha))
}
sample_beta = function(theta, beta, alpha, sigma) {
beta_star = rnorm(1, beta, sigma)
n<-length(theta)
if (beta_star < 0 ) return(beta)
lrho = (beta_star-beta)*sum(log(1-theta))
-5/2*(log(beta_star+alpha)-log(alpha+beta))
+ n*(lgamma(beta_star+alpha)-lgamma(alpha+beta))
-n*(lgamma(beta_star)-lgamma(beta))
return(ifelse(log(runif(1))<lrho, beta_star, beta))
}
run_mcmc = function(alpha0, beta0, n.reps=1e3, tune=TRUE) {
sigma = 1
theta_keep = matrix(NA, n.reps, length(y))
alpha_keep = numeric(n.reps); alpha_keep[1] = alpha = alpha0
beta_keep = numeric(n.reps); beta_keep[1] = beta = beta0
for (i in 1:n.reps) {
theta = sample_theta(y,n,alpha,beta)
# Automatically tune alpha
alpha_old = alpha
beta_old = beta
alpha = sample_alpha(theta, beta, alpha, sigma)
beta = sample_beta(theta, beta, alpha, sigma)
if (tune) {
if (alpha==alpha_old|beta==beta_old) {
sigma = sigma/1.1
} else {
sigma = sigma*1.1
}
}
theta_keep[i,] = theta
alpha_keep[i]  = alpha
beta_keep[i]   = beta
}
return(list(theta=theta_keep, alpha=alpha_keep, beta=beta_keep))
}
set.seed(1)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
plot(res$aplpha)
plot(res1$aplpha)
summary(res1$aplpha)
summary(res1)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
summary(alpha.list)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
beta.list  = mcmc.list(mcmc(res1$beta),mcmc(res2$beta),mcmc(res3$beta))
theta.list  = mcmc.list(mcmc(res1$theta),mcmc(res2$theta),mcmc(res3$theta))
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
gelman.diag(theta.list) # theta convergence
alp <- data.frame(alpha=c(res1$alpha,res2$alpha,res3$alpha))
bet <- data.frame(beta=c(res1$beta,res2$beta,res3$beta))
the <- data.frame(rbind(res1$theta,res2$theta,res3$theta))
colnames(the) <- paste('theta',1:10,sep='')
simu <- data.frame(the,alp,bet,chain=rep(1:3, each=20000), iter=rep(1:20000,3))
simu <- subset(simu, iter > 10000)
simu$iter <- iter=rep(1:10000,3)
simu$iter <- iter=rep(1:10000,3)
simu$iter <- iter=rep(1:10000,3)
simu$iter <- iter=rep(1:10000,3)
simu$iter <- rep(1:10000,3)
simu.melt <- melt(simu, id.vars=c('iter','chain'))
ci <- matrix(0,ncol=2,nrow=12)
for (i in 1:12) ci[i,] <- aux[[i]]
rownames(ci) <- names(aux)
colnames(ci) <- c('Lower limit', ' Upper limit')
ci
View(simu)
aux<-with(simu.melt,tapply(value,variable,quantile,probs=c(.025, .975)))
ci <- matrix(0,ncol=2,nrow=12)
for (i in 1:12) ci[i,] <- aux[[i]]
rownames(ci) <- names(aux)
colnames(ci) <- c('Lower limit', ' Upper limit')
ci
qplot(data=simu,x=alpha,y=beta, geom='point',size=I(1))+geom_density2d()
qplot(data=simu,x=alpha,y=beta, geom='point',size=I(1))+geom_density2d(binwith=.2)
qplot(data=simu,x=alpha,y=beta, geom='point',size=I(1))+geom_density2d(binwidth=.2)
qplot(data=simu,x=alpha,y=beta, geom='point',size=I(1))+geom_density2d(binwidth=.8)
set.seed(1)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
library(coda)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
beta.list  = mcmc.list(mcmc(res1$beta),mcmc(res2$beta),mcmc(res3$beta))
theta.list  = mcmc.list(mcmc(res1$theta),mcmc(res2$theta),mcmc(res3$theta))
gelman.diag(beta.list) # beta convergence
set.seed(1); res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
set.seed(2); res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
set.seed(3); res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=20e3)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
beta.list  = mcmc.list(mcmc(res1$beta),mcmc(res2$beta),mcmc(res3$beta))
theta.list  = mcmc.list(mcmc(res1$theta),mcmc(res2$theta),mcmc(res3$theta))
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
set.seed(1); res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
set.seed(2); res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
set.seed(3); res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
set.seed(1)
res1 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res2 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
res3 = run_mcmc(alpha0=runif(1,0,20), beta0=runif(1,0,20),n.reps=10e3)
alpha.list = mcmc.list(mcmc(res1$alpha),mcmc(res2$alpha),mcmc(res3$alpha))
beta.list  = mcmc.list(mcmc(res1$beta),mcmc(res2$beta),mcmc(res3$beta))
theta.list  = mcmc.list(mcmc(res1$theta),mcmc(res2$theta),mcmc(res3$theta))
gelman.diag(alpha.list) # alpha convergence
gelman.diag(beta.list) # beta convergence
plot(beta.list)
alp <- data.frame(alpha=c(res1$alpha,res2$alpha,res3$alpha))
bet <- data.frame(beta=c(res1$beta,res2$beta,res3$beta))
the <- data.frame(rbind(res1$theta,res2$theta,res3$theta))
colnames(the) <- paste('theta',1:10,sep='')
res1f = run_mcmc(alpha0=res1$alpha[10e3], beta0=res1$beta[10e3],n.reps=10e3)
res2f = run_mcmc(alpha0=res2$alpha[10e3], beta0=res2$beta[10e3],n.reps=10e3)
res3f = run_mcmc(alpha0=res3$alpha[10e3], beta0=res3$beta[10e3],n.reps=10e3)
alp <- data.frame(alpha=c(res1f$alpha,res2f$alpha,res3f$alpha))
bet <- data.frame(beta=c(res1f$beta,res2f$beta,res3f$beta))
the <- data.frame(rbind(res1f$theta,res2f$theta,res3f$theta))
colnames(the) <- paste('theta',1:10,sep='')
simu <- data.frame(the,alp,bet,chain=rep(1:3, each=10000), iter=rep(1:10000,3))
simu.melt <- melt(simu, id.vars=c('iter','chain'))
aux<-with(simu.melt,tapply(value,variable,quantile,probs=c(.025, .975)))
alp <- data.frame(alpha=c(res1$alpha,res2$alpha,res3$alpha))
bet <- data.frame(beta=c(res1$beta,res2$beta,res3$beta))
the <- data.frame(rbind(res1$theta,res2$theta,res3$theta))
colnames(the) <- paste('theta',1:10,sep='')
simu <- data.frame(the,alp,bet,chain=rep(1:3, each=5000), iter=rep(1:5000,3))
simu.melt <- melt(simu, id.vars=c('iter','chain'))
qplot(data=simu.melt, x=iter, y=value, color=chain,geom='line') + facet_wrap(facets=~ variable, scales="free_y")
qplot(data=subset(simu.melt,variable=='beta'), x=iter, y=value, color=chain,geom='line')
simu$iter <- as.factor(simu$iter)
simu.melt <- melt(simu, id.vars=c('iter','chain'))
qplot(data=subset(simu.melt,variable=='beta'), x=iter, y=value, color=chain,geom='line')
summary(simu.melt)
simu <- data.frame(the,alp,bet,chain=rep(1:3, each=10000), iter=rep(1:10000,3))
simu$chain <- as.factor(simu$chain)
qplot(data=subset(simu.melt,variable=='beta'), x=iter, y=value, color=chain,geom='line')
simu <- data.frame(the,alp,bet,chain=rep(1:3, each=10000), iter=rep(1:10000,3))
simu$chain <- as.factor(simu$chain)
simu.melt <- melt(simu, id.vars=c('iter','chain'))
simu <- data.frame(the,alp,bet,chain=rep(1:3, each=10000), iter=rep(1:10000,3))
qplot(data=subset(simu.melt,variable=='beta'), x=iter, y=value, color=chain,geom='line')
qplot(data=simu.melt, x=iter, y=value, color=chain,geom='line') + facet_wrap(facets=~ variable, scales="free_y")
ci <- matrix(0,ncol=3,nrow=12)
for (i in 1:12) ci[i,] <- aux[[i]]
aux<-with(simu.melt,tapply(value,variable,quantile,probs=c(.025,0.5,.975)))
ci <- matrix(0,ncol=3,nrow=12)
for (i in 1:12) ci[i,] <- aux[[i]]
rownames(ci) <- names(aux)
colnames(ci) <- c('Lower limit','Median','Upper limit')
ci
gamma(5/2)
library(producplots)
library(productplots)
library(productplots)
library(productplot)
624351+495651+557648+794921+1514456
0.34015 + c(-1,1)*1.96*0.03892
0.80056   + c(-1,1)*1.96* 0.21178
5.59441   + c(-1,1)*1.96* 0.08296
library(rggpobi)
library(rggobi)
library(rggobi)
48/3
dat.aux$communities <-with(dat.aux, reorder(communities, prop1821) )
dat.aux<-melt(data=agesex,id.vars=c('community','prop1821'),measure.vars=c(4:26,28:50) )
(1-(3+1)*0.024)/3
0.924*48/2
(1-0.924)*48/2
48/11.69
36/8.27
1.2*35
1.2*60
1.2*130
?reldist
??reldist
?gini
??gini
90/21
20*898
require(MASS)
data(birthwt)
cor.boot <- function(data, k) cor(data[k,])[1,2]
cor.boot(birthwt)
cor.boot(birthwt, k=1)
cor.boot(birthwt, k=2)
cor.boot(birthwt, k=1:2)
cor.boot(birthwt, k=1:10)
cor.boot(data=birthwt, k=1:10)
cor.boot(data=birthwt, k=1:50)
cor.boot(data=birthwt, k=1:100)
? density
? bw.ucv
library(Rcapture)
library(help=Rcapture)
setwd('C:\\Users\\Toshiba\\Documents\\GitHub\\mnfb_yearly\\data')
library(shiny)
runApp("shiny1")
runApp("shiny1")
m_f = function(x) {
m = lm(ave ~ I(year-2000) + I((year-2000)^2), x)
data.frame(parameter=c("b0","b1","b2","sigma"),
estimate=c(coef(m), summary(m)$sigma))
}
models.lm = ddply(bird.yeartotal, .(forest,abbrev), m_f)
library(plyr)
m_f = function(x) {
m = lm(ave ~ I(year-2000) + I((year-2000)^2), x)
data.frame(parameter=c("b0","b1","b2","sigma"),
estimate=c(coef(m), summary(m)$sigma))
}
models.lm = ddply(bird.yeartotal, .(forest,abbrev), m_f)
tab1 <- ddply(models.lm, .(forest,parameter),function(x) summary(x$estimate) )
setwd('C:\\Users\\Toshiba\\Documents\\GitHub\\mnfb_yearly\\data')
bird.yeartotal <- read.csv('bird_yeartotal.csv')
m_f = function(x) {
m = lm(ave ~ I(year-2000) + I((year-2000)^2), x)
data.frame(parameter=c("b0","b1","b2","sigma"),
estimate=c(coef(m), summary(m)$sigma))
}
models.lm = ddply(bird.yeartotal, .(forest,abbrev), m_f)
tab1 <- ddply(models.lm, .(forest,parameter),function(x) summary(x$estimate) )
head(tab1)
head(models.lm)
subset(models.lm, abbrev='EAWP')
subset(models.lm, abbrev=='EAWP')
subset(models.lm, abbrev=='OVEN')
runApp("shiny1")
subset(bird.yeartotal, abbrev=='OVEN' & year > 2008)
summary(subset(bird.yeartotal, year > 2010) )
with(subset(bird.yeartotal, year > 2010), tapply(count,forest, summary) )
setwd('C:\\Users\\Toshiba\\Documents\\GitHub\\mnfb\\data')
bird <- read.csv('bird.csv', header=T)
head(bird)
forest <- read.csv('location.csv',header=T)
head(forest)
site <- read.csv('site.csv', header=T)
head(site)
site2<- merge(site, forest)
head(site2)
with(site2, table(year, forest))
aux <- subset(bird.yeartotal, !(forest==9020&year>2010) )
head(aux)
cond <- with(bird.yeartotal, !(forest==9020&year>2010) )
cond <- with(bird.yeartotal, (forest==9020&year>2010) )
cond <- !with(bird.yeartotal, (forest==9020&year>2010) )
cond <- with(bird.yeartotal, (forest==9020&year>2010) )
sum(cond)
with(aux, table(year,forest))
subset(aux, abbrev=='OVEN')
remove(list=ls())
# working from the mnfb folder from git
# 1) Yearly Average data creation
#setwd( "/home/nachalca/mnfb/data")
setwd('C:\\Users\\Toshiba\\Documents\\GitHub\\mnfb\\data')
bird <- read.csv('bird.csv', header=T)
# each row is a bird !!!
# minutes3: Time period during which the individual was observed divided into 3  time intervals.
# This protocol was used from 1991-2007; see 'minutes' lookup table for code descriptions
#head(bird)
# reduce birds species only the species in sp.info are important.
species <- read.csv("C:\\Users\\Toshiba\\Documents\\GitHub\\mnfb\\R\\common\\trendspecies.csv")
sp.code <- read.csv('nrri_bird_code.csv')
sp.info <-  merge(species, sp.code)
bird.red <- subset(bird, nrricode %in% sp.info$nrricode)
# get the forest info for each site
forest <- read.csv('location.csv',header=T)
#table(forest$forest)
# there are 5 forest here, that is right, only 9030, 9090 and 9020 are important
bird.red2 <- merge(bird.red, subset(forest, select=c('forest','site') ) )
bird.red <- subset(bird.red2, forest %in% c(9020,9030,9090) )
# Compute Yearly count on each period
library(plyr)
bird.tot <-ddply(bird.red, .(year,forest,nrricode),
summarise,count=length(minutes3),count1=sum(minutes3==1),count2=sum(minutes3==2),count3=sum(minutes3==3)
)
#head(bird.tot)
#with(bird.tot, table(year,forest))
with(bird.tot, length(unique(nrricode))) # 73 species
# site information: there is one recor per site*year, so here is the total times each site is sampled
site <- read.csv('site.csv', header=T)
site2<- merge(site, forest)
with(site2, length(unique(site)))
# get0 has the number of site sampled each year*forest, this is the denominator for the anual counts
# to get the anual average.
get0 <- ddply(site2, .(year, forest),summarise, samples=length(obs) )
# compute average count on each site*year
bird.tot <- merge(bird.tot, get0)
bird.tot$ave <- with(bird.tot, count/samples)
bird.tot$forest <- factor(bird.tot$forest)
# cut the counts previous to 1995
bird.tot <- bird.tot[bird.tot$year > 1994, ]
# There are some 0 counts missings
gr  <- expand.grid(unique(bird.tot$year),levels(bird.tot$forest), unique(bird.tot$nrricode))
colnames(gr) <- colnames(bird.tot)[1:3]
aux <- merge(bird.tot,gr, all.y=T)
aux[is.na(aux$count), 4:9] <- 0
# put the species
bird.yeartotal <- merge(aux, sp.info[,1:2])
# there is no data on forest=9020 for years 2011 or 2012
bird.yeartotal <- subset(bird.yeartotal,!(forest==9020&year>2010)   )
# saving data
write.csv(bird.yeartotal, file='bird_yeartotal.csv', row.names=FALSE)
setwd('C:\\Users\\Toshiba\\Documents\\GitHub\\mnfb_yearly\\data')
library(shiny)
runApp("shiny1")
runApp("shiny1")
remove(list=ls())
setwd('C:\\Users\\Toshiba\\Documents\\GitHub\\mnfb_yearly\\data')
bird.yeartotal <- read.csv('bird_yeartotal.csv')
with(bird.yeartotal, table(forest))
summary(bird.yeartotal)
runApp("shiny1")
